input {
  file {
    path => "/usr/share/logstash/logs/auth.log"  # Update this with the path to your auth.log file
    # start_position => "beginning"
    # sincedb_path => "/dev/null"  # Disable sincedb to read the file from the start each time
    sincedb_path => "/usr/share/logstash/data/.sincedb"
  }
}

filter {
  grok {
    match => {
      "message" => [
        "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:program}(?:\[%{POSINT:pid}\])?: %{DATA:status} password for %{DATA:user} from %{IP:src_ip}",
        "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:program}(?:\[%{POSINT:pid}\])?: %{DATA:status} password for invalid user %{DATA:user} from %{IP:src_ip}",
        "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:program}(?:\[%{POSINT:pid}\])?: (?<session_status>session opened|session closed) for user %{DATA:user}",
        "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:program}(?:\[%{POSINT:pid}\])?: %{GREEDYDATA:message}"
      ]
    }
  }

  date {
    match => [ "timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
    target => "@timestamp"
  }

  mutate {
    add_field => { "auth_type" => "system" }
  }

  if [program] =~ /sudo/ {
    grok {
      match => { "message" => ".*COMMAND=(?<sudo_command>.*)$" }
    }
    mutate {
      add_field => { "auth_type" => "sudo" }
    }
  }

  if [status] == "Failed" {
    mutate {
      add_field => { "auth_result" => "failure" }
    }
  } else if [status] == "Accepted" {
    mutate {
      add_field => { "auth_result" => "success" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]  # Update this with your Elasticsearch host
    index => "auth-log-%{+YYYY.MM.dd}"
  }
  #stdout {
  #  codec => rubydebug  # Print parsed output to the console for debugging
 # }
}


