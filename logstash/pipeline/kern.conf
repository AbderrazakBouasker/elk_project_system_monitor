# input {
#   file {
#     path => "/usr/share/logstash/locallogs/kern.log"  # Update this with the actual path to your kern.log
#     start_position => "beginning"
#     sincedb_path => "/dev/null"  # Prevents Logstash from remembering the last read position
#   }
# }

# filter {
#   grok {
#     match => {
#       "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} kernel: \[\s*%{NUMBER:kernel_time}\] %{GREEDYDATA:kernel_message}"
#     }
#   }

#   date {
#     match => [ "timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
#     target => "@timestamp"
#   }

#   # Classify kernel events
#   if [kernel_message] =~ /error|fail|critical|warn|BAD|BUG|crash|PANIC/i {
#     mutate { add_field => { "event_severity" => "error" } }
#   } else {
#     mutate { add_field => { "event_severity" => "info" } }
#   }

#   # Extract specific hardware events
#   grok {
#     match => {
#       "kernel_message" => [
#         "(?<device_event>usb %{DATA:usb_port}: %{DATA:usb_action})",
#         "(?<network_event>%{DATA:interface}: %{GREEDYDATA:network_action})",
#         "(?<cpu_event>CPU%{NUMBER:cpu_id})",
#         "(?<memory_event>Memory: %{GREEDYDATA:memory_action})"
#       ]
#     }
#     tag_on_failure => []
#   }
# }

# output {
#   elasticsearch {
#     hosts => ["http://elasticsearch:9200"]  # Update if necessary
#     index => "kern_logs-%{+YYYY.MM.dd}"
#   }
  
#   #stdout {
#    # codec => rubydebug  # Prints to the console for debugging
#   #}
# }


